package xtcp;

import org.apache.commons.net.DefaultSocketFactory;

import java.io.*;

import java.net.*;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonStreamParser;

import java.util.ArrayList;
import java.util.Scanner;

/**
 * Class to contain the functionality of the xtcp program.
 */
public class xtcp {
    private static JsonObject out1;
    private static JsonArray out2;    

    /**
     * Main function of xtcp. Waits for TCP client connection and 
     * receives and responds with JSON.
     * @args arguments to the main function of xtcp.
     */
    public static void main(String[] args) {
        int portNo = 4567;
        DefaultSocketFactory factory = new DefaultSocketFactory();
        ServerSocket server = null;
        Socket client = null;

        // Validate arguments
        if (args.length > 1) {
            System.out.println("Usage: ./xtcp <port number>");
            System.exit(1);
        } else if (args.length == 1) {
            try {
                Integer.parseInt(args[0]);
            } catch (NumberFormatException e) {
                System.out.println("Usage: ./xtcp <port number>");
                System.exit(1);
            }

            portNo = Integer.parseInt(args[0]);
            if (portNo <= 0) {
                System.out.println("Usage: ./xtcp <port number>");
                System.exit(1);
            }
        } else {
            System.out.println("Defaulting to port " + portNo + ".");
        }

        // Set up TCP connection 
        try {
            server = factory.createServerSocket(portNo);
            server.setSoTimeout(3000);
        } catch (IOException e) {
            System.out.println("Could not create sockets.");
            System.exit(2);
        }

        try { 
            client = server.accept();
        } catch (SocketTimeoutException e) {
            System.out.println("Did not receive data before timeout.");
            System.exit(2);
        } catch (IOException e) {
            System.out.println("IO exception has occurred.");
            System.exit(2);
        } 

        // Do some JSON parsing
        InputStream istream = null;
        OutputStream ostream = null;
        try {
            istream = client.getInputStream();
            ostream = client.getOutputStream();
        } catch (IOException e) {
            System.out.println("Error obtaining I/O streams from client.");
            System.exit(2);
        }

        parseInput(istream);

        PrintWriter p = new PrintWriter(ostream, true);

        p.println(out1.toString());
        p.println(out2.toString());
        p.close();

        try {
            client.close();
            server.close();
        } catch (IOException e) {
            System.out.println("Error closing sockets.");
            System.exit(2);
        }      
    }

    /**
     * Helper method to parse all JSON input from the a TCP input stream
     * and create the appropriate JSON objects to return.
     * @args istream Input stream to read from.
     */
    private static void parseInput(InputStream istream) {
        // Open a scanner to accept all the JSON values from TCP conn
        // into one string to give to a parser
        Scanner input = new Scanner(istream);
        StringBuilder rawJson = new StringBuilder();
        while (input.hasNextLine()) {
            rawJson.append(input.nextLine());
            rawJson.append("\n");
        }
        
        String jsonInput = rawJson.toString();

        // Create a Gson object to convert JSON into Java objects
        Gson gson = new GsonBuilder().create();
        // Open a parser taking the String generated by inputs into STDIN
        JsonStreamParser parser = new JsonStreamParser(jsonInput);

        int jsonValues = 0;
        ArrayList<JsonElement> jElements = new ArrayList<>();

        // As long as input is available on the parser,
        // interact with each JSON value
        while (parser.hasNext()) {
            JsonElement element = parser.next();
            jsonValues++;
            jElements.add(element);
        }
        
        // Generate the JSON list from the individual 
        // JSON elements in the ArrayList we obtained
        JsonArray out1array = new JsonArray();
        for (JsonElement e : jElements) {
            out1array.add(e);
        }

        // Create the first output, a JSON object
        out1 = new JsonObject();
        // add "count", (# of values read)
        out1.add("count", new JsonPrimitive(jsonValues));
        // add "seq", (array of JSON values in order)
        out1.add("seq", out1array);

        // Create the second output, a JSON array
        out2 = new JsonArray();
        // add first element - number of JSON values read
        out2.add(jsonValues);
        // add remaining elements - sequence of JSON values in reverse order
        for (int i = jElements.size() - 1; i >= 0; i--) {
            out2.add(jElements.get(i));
        }
    }
}
